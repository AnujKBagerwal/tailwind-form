{"version":3,"sources":["components/Listing.js","hooks/useDarkMode.js","components/Nav.js","hooks/Modal.js","components/NewTopic.js","components/ReplyComment.js","App.js","reportWebVitals.js","index.js"],"names":["Listing","dataList","select","className","map","data","index","onClick","title","reply","length","catagory","x","name","useDarkMode","useState","localStorage","getItem","theme","setTheme","colorTheme","useEffect","root","window","document","documentElement","classList","remove","setItem","add","Nav","toggleNewToggle","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Modal","props","children","onClose","visible","modalStyles","bodyStyles","listener","e","keyCode","addEventListener","removeEventListener","aria-hidden","role","aria-modal","aria-labelledby","NewTopic","newTopicToggle","save","validationSchema","Yup","required","of","shape","description","initialValues","onSubmit","values","enableReinitialize","setFieldValue","type","placeholder","as","defaultValue","onChange","target","value","disabled","rows","ReplyComment","closeCommentFlag","desToggle","setDesToggle","tmp","Object","assign","push","des","addDesc","rep","App","setNewTopicToggle","setDataList","selectComment","setSelectComment","selectCommentFlag","setSelectCommentFlag","number","selectData","setData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.501b35bd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Listing = ({ dataList, select }) => {\n  return (\n    <div>\n      <div className='flex mb-2'>\n        <div className='dark:text-white'>Topic</div>\n        <div className='ml-auto dark:text-white'>Replies</div>\n      </div>\n      <hr className='mb-2' />\n      {dataList &&\n        dataList.map((data, index) => (\n          <div key={index} className='' onClick={() => select(index)}>\n            <div className='flex'>\n              <div className='dark:text-white mt-2'>{data.title}</div>\n              <div className='ml-auto mr-5 dark:text-white mt-2'>\n                {data.reply ? data.reply.length : 0}\n              </div>\n            </div>\n            <div className='mb-1'>\n              {data.catagory &&\n                data.catagory.map((x, index) => (\n                  <span\n                    key={index}\n                    className='m-1 bg-gray-300 ml-0 pl-3 pr-3 rounded-lg text-gray-500 dark:text-black'\n                  >\n                    {x.name}\n                  </span>\n                ))}\n            </div>\n            <hr />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Listing;\n","import React, { useEffect, useState } from \"react\";\n\nconst useDarkMode = () => {\n  const [theme, setTheme] = useState(localStorage.getItem(\"theme\"));\n  const colorTheme = theme === \"dark\" ? \"light\" : \"dark\";\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(colorTheme);\n    localStorage.setItem(\"theme\", theme);\n    root.classList.add(theme);\n  }, [theme, colorTheme]);\n  return [colorTheme, setTheme];\n};\n\nexport default useDarkMode;\n","import React from \"react\";\nimport useDarkMode from \"../hooks/useDarkMode\";\n\nconst Nav = ({ toggleNewToggle }) => {\n  const [colorTheme, setTheme] = useDarkMode();\n\n  return (\n    <div className='flex  absolute top-0 bg-blue-100 w-full p-2 '>\n      <div className=' '>\n        <span\n          onClick={() => setTheme(colorTheme)}\n          className='w-10 h-10 bg-indigo-500 block rounded-full shadow-lg \n        cursor-pointer text-white  items-center justify-center'\n        >\n          {colorTheme === \"light\" ? (\n            <svg\n              xmlns='http://www.w3.org/2000/svg'\n              fill='none'\n              viewBox='0 0 24 24'\n              stroke='currentColor'\n            >\n              <path\n                strokeLinecap='round'\n                strokeLinejoin='round'\n                strokeWidth='2'\n                d='M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z'\n              />\n            </svg>\n          ) : (\n            <svg\n              xmlns='http://www.w3.org/2000/svg'\n              fill='none'\n              viewBox='0 0 24 24'\n              stroke='currentColor'\n            >\n              <path\n                strokeLinecap='round'\n                strokeLinejoin='round'\n                strokeWidth='2'\n                d='M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z'\n              />\n            </svg>\n          )}\n        </span>\n      </div>\n      <div\n        onClick={() => toggleNewToggle()}\n        className='ml-auto bg-gray-400 text-indigo-50 dark:text-black dark:bg-white pl-3 pr-3 pb-0 pt-2 rounded-lg mr-3'\n      >\n        + Create New Topic\n      </div>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React, { useEffect } from \"react\";\n\nconst Modal = (props) => {\n  const { children, onClose, visible, modalStyles, bodyStyles } = props;\n\n  // register for keypress event\n  useEffect(() => {\n    const listener = (e) => {\n      const { keyCode } = e;\n      if (keyCode !== 27) return;\n      onClose();\n    };\n\n    // add evennt bindings\n    document.addEventListener(\"keyup\", listener, false);\n\n    // clear event bindings\n    return () => {\n      document.removeEventListener(\"keyup\", listener, false);\n    };\n  }, []);\n\n  return (\n    <>\n      {visible && (\n        <div className='fixed z-10 inset-0 overflow-y-auto'>\n          <div\n            className={`flex items-center justify-center min-h-screen p-0 ${modalStyles}`}\n          >\n            {/* Modal Overlay */}\n            <div\n              className='fixed inset-0 transition-opacity'\n              aria-hidden='true'\n              onClick={onClose}\n            >\n              <div className='absolute inset-0 bg-secondary-base opacity-40' />\n            </div>\n            {/* Modal Body */}\n            <div\n              className={`bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-5xl sm:w-full px-8 py-6 ${bodyStyles}`}\n              role='dialog'\n              aria-modal='true'\n              aria-labelledby='modal-headline'\n            >\n              {children}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Modal from \"../hooks/Modal\";\n\nconst NewTopic = ({ newTopicToggle, toggleNewToggle, save }) => {\n  const initialValues = {\n    title: \"\",\n    catagory: [],\n    description: \"\",\n  };\n  const validationSchema = Yup.object({\n    title: Yup.string().required(\"Please Enter Title\"),\n    catagory: Yup.array()\n      .of(\n        Yup.object().shape({\n          name: Yup.string().required(\"Name required\"),\n        })\n      )\n      .required(\"Please Enter Catagory\"),\n    description: Yup.string().required(\"Please Enter Description\"),\n  });\n\n  return (\n    <div>\n      <Modal visible={newTopicToggle} onClose={() => toggleNewToggle()}>\n        <h1 className='text-2xl p-2 pb-3 pl-0'>Create New Topic</h1>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={(values) => save(values)}\n          enableReinitialize\n        >\n          {({ values, setFieldValue }) => (\n            <Form>\n              <div className='grid-cols-1 '>\n                <div className='mb-6'>\n                  <label>Title</label>\n                  <Field\n                    type='text'\n                    name='title'\n                    placeholder={\"Type title, or paste a link here\"}\n                    className='w-full mt-2 p-2 border-gray-400 border-2'\n                  />\n                  <span className='text-red-500 mt-0'>\n                    <ErrorMessage name='title' />\n                  </span>\n                </div>\n              </div>\n              <div className='grid-cols-1 '>\n                <div className='mb-6'>\n                  <label>Catagory</label>\n                  <Field\n                    as='select'\n                    name='catagory'\n                    placeholder={\"Select Catagory\"}\n                    className='w-full bg-transparent mt-2 p-2 border-gray-400 border-2'\n                    defaultValue=''\n                    onChange={(e) =>\n                      setFieldValue(\"catagory\", [{ name: e.target.value }])\n                    }\n                  >\n                    <option value='' disabled>\n                      Select Catagory\n                    </option>\n                    <option value='texterLoader'>Texter Loader</option>\n                    <option value='objLoader'>OBJ Loader</option>\n                    <option value='fbxLoader'>FBX Loader</option>\n                  </Field>\n                  <span className='text-red-500 mt-0'>\n                    <ErrorMessage name='catagory[0].name' />\n                  </span>\n                </div>\n              </div>\n              <div className='grid-cols-1 '>\n                <div className='mb-6'>\n                  <label>Description</label>\n                  <Field\n                    type='textarea'\n                    name='description'\n                    placeholder={\"Description\"}\n                    className='w-full mt-2  p-2 border-gray-400 border-2'\n                    rows='6'\n                  />\n                  <span className='text-red-500 mt-0'>\n                    <ErrorMessage name='description' />\n                  </span>\n                </div>\n              </div>\n              <div className='flex'>\n                <div>\n                  <button\n                    className='m-2 bg-blue-500 p-2 text-white rounded-lg'\n                    type='submit'\n                  >\n                    Submit\n                  </button>\n                </div>\n                <div>\n                  <button\n                    className='m-2 bg-gray-500 p-2 text-white rounded-lg'\n                    type='button'\n                    onClick={() => toggleNewToggle()}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n              {/* {JSON.stringify(values, null, 2)} */}\n            </Form>\n          )}\n        </Formik>\n      </Modal>\n    </div>\n  );\n};\n\nexport default NewTopic;\n","import React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst ReplyComment = ({ data, save, closeCommentFlag }) => {\n  const [desToggle, setDesToggle] = useState(false);\n\n  const initialValues = {\n    description: \"\",\n  };\n\n  const validationSchema = Yup.object({\n    description: Yup.string().required(\"Please Enter Description\"),\n  });\n\n  const addDesc = (value) => {\n    let tmp = Object.assign({}, data);\n    tmp.reply.push({ des: value.description });\n    save(tmp);\n  };\n\n  return (\n    <div>\n      <div>\n        <button\n          className='m-2 ml-0 bg-gray-500 p-2 text-white rounded-lg w-1/12'\n          type='button'\n          onClick={() => {\n            closeCommentFlag();\n          }}\n        >\n          Back\n        </button>\n      </div>\n      <h1 className='text-3xl dark:text-white '>{data.title}</h1>\n      <div className='mb-1'>\n        {data.catagory &&\n          data.catagory.map((x, index) => (\n            <span\n              key={index}\n              className='m-1 bg-gray-300 ml-0 pl-3 pr-3  text-gray-500 dark:text-black '\n            >\n              {x.name}\n            </span>\n          ))}\n      </div>\n      <hr />\n      <div className='bg-gray-300'>\n        <div className='m-4'>{data.description}</div>\n      </div>\n      <div className='flex'>\n        <div\n          className='flex bg-gray-300 ml-auto'\n          onClick={() => setDesToggle(!desToggle)}\n        >\n          <div className='w-5 h-5 ml-auto  mr-2'>\n            <svg\n              xmlns='http://www.w3.org/2000/svg'\n              fill='none'\n              viewBox='0 0 24 24'\n              stroke='currentColor'\n            >\n              <path\n                strokeLinecap='round'\n                strokeLinejoin='round'\n                strokeWidth='2'\n                d='M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6'\n              />\n            </svg>\n          </div>\n          <span className=''>reply</span>\n        </div>\n      </div>\n\n      {desToggle && (\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={(values) => addDesc(values)}\n          enableReinitialize\n        >\n          {({ values, setFieldValue }) => (\n            <Form>\n              <div className='grid-cols-1 '>\n                <div className='mb-6'>\n                  {/* <label>Description</label> */}\n                  <Field\n                    type='textarea'\n                    name='description'\n                    placeholder={\"Description\"}\n                    className='w-full mt-2  p-2 border-gray-400 border-2'\n                    rows='6'\n                    onChange={(e) => {\n                      setFieldValue(\"description\", e.target.value);\n                    }}\n                  />\n                  <span className='text-red-500 mt-0'>\n                    <ErrorMessage name='description' />\n                  </span>\n                </div>\n              </div>\n              <div className='flex'>\n                <div>\n                  <button\n                    className='m-2 bg-blue-500 p-2 text-white rounded-lg'\n                    type='submit'\n                  >\n                    Reply\n                  </button>\n                </div>\n                <div>\n                  <button\n                    className='m-2 bg-gray-500 p-2 text-white rounded-lg'\n                    type='button'\n                    onClick={() => {\n                      setFieldValue(\"description\", \"\");\n                      setDesToggle(!desToggle);\n                    }}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n              {/* {JSON.stringify(values, null, 2)} */}\n            </Form>\n          )}\n        </Formik>\n      )}\n      {data.reply &&\n        data.reply.map((rep, index) => {\n          return (\n            <>\n              <div key={index} className='m-3 bg-gray-200 p-3'>\n                {rep.des}\n              </div>\n              <hr />\n            </>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default ReplyComment;\n","import React, { useState } from \"react\";\nimport Listing from \"./components/Listing\";\nimport Nav from \"./components/Nav\";\nimport NewTopic from \"./components/NewTopic\";\nimport ReplyComment from \"./components/ReplyComment\";\n\nconst App = () => {\n  const [newTopicToggle, setNewTopicToggle] = useState(false);\n  const [dataList, setDataList] = useState([\n    {\n      title: \"lorem\",\n      catagory: [{ name: \"a\" }, { name: \"b\" }],\n      description: \"asfsdfsfsfsf\",\n      reply: [{ des: \"sdf\" }],\n    },\n  ]);\n  const [selectComment, setSelectComment] = useState();\n  const [selectCommentFlag, setSelectCommentFlag] = useState(false);\n\n  const toggleNewToggle = () => {\n    setNewTopicToggle(!newTopicToggle);\n  };\n\n  const setData = (value) => {\n    let data = Object.assign([], dataList);\n    data.push(value);\n    setDataList(data);\n    toggleNewToggle();\n  };\n\n  const selectData = (number) => {\n    setSelectCommentFlag(true);\n    setSelectComment(number);\n  };\n\n  const closeCommentFlag = (number) => {\n    setSelectCommentFlag(false);\n    setSelectComment(\"\");\n  };\n\n  const setReply = (data) => {\n    setSelectCommentFlag(false);\n    setSelectComment(\"\");\n  };\n\n  return (\n    <>\n      <div className=' min-h-screen dark:bg-black transition duration-500'>\n        <Nav toggleNewToggle={() => toggleNewToggle()} />\n        <div className='m-16 p-0'>\n          {/* <h1 className='text-blue-400 dark:text-white text-5xl'>Hello</h1> */}\n          {selectCommentFlag ? (\n            <ReplyComment\n              data={dataList[selectComment]}\n              save={(data) => setReply(data)}\n              closeCommentFlag={() => closeCommentFlag()}\n            />\n          ) : (\n            <>\n              <Listing\n                dataList={dataList}\n                select={(number) => selectData(number)}\n              />\n              {newTopicToggle && (\n                <NewTopic\n                  newTopicToggle={newTopicToggle}\n                  toggleNewToggle={() => toggleNewToggle()}\n                  save={(value) => setData(value)}\n                />\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./style/main.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}